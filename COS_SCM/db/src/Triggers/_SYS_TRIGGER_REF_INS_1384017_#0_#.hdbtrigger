TRIGGER "SYS_TRIGGER_REF_INS_1384017_#0_#" AFTER INSERT ON "SCM_PROD_DKTN_PRODUCTION_SCRAP" REFERENCING NEW ROW NEWROW FOR EACH ROW 
BEGIN DECLARE VAR0 VARCHAR(5000) := '';  DECLARE KEY_COUNT INT := 0;  DECLARE KEY_COUNT_RR INT := 0;  DECLARE KEY_COUNT_RC INT := 0;  DECLARE foreign_key_err_cond CONDITION FOR SQL_ERROR_CODE 10000;  DECLARE serialize_err_cond CONDITION FOR SQL_ERROR_CODE 10001;  DECLARE EXIT HANDLER FOR foreign_key_err_cond RESIGNAL;  DECLARE EXIT HANDLER FOR serialize_err_cond RESIGNAL;  DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1300 SELECT ::SQL_ERROR_CODE INTO VAR0 FROM "COS_SCM::DUMMY"; IF :newrow."ID_SOURC" is not null THEN  IF CURRENT_TRANSACTION_ISOLATION_LEVEL != 'READ COMMITTED'  THEN      SELECT count(*) INTO KEY_COUNT_RR FROM "SCM_ANALYTIC_SOURCE" WHERE "ID_SOURC" = :newrow."ID_SOURC";      SELECT count(*) INTO KEY_COUNT_RC FROM "SCM_ANALYTIC_SOURCE" WHERE "ID_SOURC" = :newrow."ID_SOURC";      IF ( :KEY_COUNT_RR = 0 and :KEY_COUNT_RC != 0 ) or ( :KEY_COUNT_RR != 0 and :KEY_COUNT_RC = 0 )      THEN          SIGNAL serialize_err_cond SET MESSAGE_TEXT = 'serializable failure';     END IF;  END IF; SELECT "ID_SOURC" INTO VAR0 FROM "SCM_ANALYTIC_SOURCE" WHERE "ID_SOURC" = :newrow."ID_SOURC" FOR SHARE LOCK ; END IF; END;